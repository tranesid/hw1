//!!!DO NOT EDIT THIS FILE!!!
// to run this specific test file run 'yarn run test hw1'
// or run 'yarn run test', to run all test

//!!!DO NOT EDIT THIS FILE!!!
import {
    doubleNumber,
    fizzbuzz,
    getHighNum,
    getLowNum,
    getSum,
    isOddOrEven,
    isSorted,
    vowelCount,
    randomNumber, 
    calc,
  } from "../src/hw1";

  it("test calc", () => {
    let returnValue1 = calc(2,2,'+');
    let returnValue2 = calc(2,2,'-');
    let returnValue3 = calc(2,3,'*');
    let returnValue4 = calc(2,2,'/');
  
    expect(returnValue1).toBe(4);
    expect(returnValue2).toBe(0);
    expect(returnValue3).toBe(6);
    expect(returnValue4).toBe(1);
  });
  
  it("test doubleNumber", () => {
    let returnValue1 = doubleNumber(2);
    let returnValue2 = doubleNumber(10);
  
    expect(returnValue1).toBe(4);
    expect(returnValue2).toBe(20);
  });
  
  it("test isOddOrEven", () => {
    let returnValue1 = isOddOrEven(2);
    let returnValue2 = isOddOrEven(5);
  
    expect(returnValue1).toBe('even');
    expect(returnValue2).toBe('odd');
  });
  
  it("test randomNumber", () => {
    let numbers = []  
    // run the function 100 time
    for(let i = 0; i<100; i++){
      numbers.push(randomNumber())
    }
    // get the unique numbers that were generated
    let uniqueAndSorted = [...new Set(numbers)].sort()
  
    expect(uniqueAndSorted).toEqual([0,1,2,3,4,5]);
  });
  
  it("test vowelCount", () => {
    let returnValue1 = vowelCount('abcdefghifousd');
    let returnValue2 = vowelCount('bcdfghf');
  
    expect(returnValue1).toBe(5);
    expect(returnValue2).toBe(0);
  });
  
  
  // getSum
  it("test getSum", () => {
    let returnValue1 = getSum([1, 2, 3]);
    let returnValue2 = getSum([4, 4, 4]);
  
    expect(returnValue1).toBe(6);
    expect(returnValue2).toBe(12);
  });
  
  it("test getHighNum", () => {
    let returnValue1 = getHighNum([1, 2, 3]);
    let returnValue2 = getHighNum([4, 2, 1]);
  
    expect(returnValue1).toBe(3);
    expect(returnValue2).toBe(4);
  });
  
  it("test getLow", () => {
    let returnValue1 = getLowNum([1, 2, 3]);
    let returnValue2 = getLowNum([4, 2, 1, -1]);
  
    expect(returnValue1).toBe(1);
    expect(returnValue2).toBe(-1);
  });
  
  it("test isSorted", () => {
    let returnValue1 = isSorted([1, 2, 3, 3]);
    let returnValue2 = isSorted([1, 1, 1]);
    let returnValue3 = isSorted([2, 4, 2, 1, -1]);
  
    expect(returnValue1).toBe(true);
    expect(returnValue2).toBe(true);
    expect(returnValue3).toBe(false);
  });
  
  it("test fizzbuzz", () => {
    let returnValue1 = fizzbuzz(3);
    let returnValue2 = fizzbuzz(5);
    let returnValue3 = fizzbuzz(10);
    let returnValue4 = fizzbuzz(15);
    let returnValue5 = fizzbuzz(4);
  
    expect(returnValue1).toBe("fizz");
    expect(returnValue2).toBe("buzz");
    expect(returnValue3).toBe("buzz");
    expect(returnValue4).toBe("fizzbuzz");
    expect(returnValue5).toBe(4);
  });
